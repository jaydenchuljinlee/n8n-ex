'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { createComplaint, ApiError } from '@/lib/api';
import { ComplaintCategory, ComplaintResponse } from '@/types/complaint';

const complaintSchema = z.object({
  customerName: z.string().min(2, '이름은 2자 이상이어야 합니다'),
  customerEmail: z.string().email('유효한 이메일 주소를 입력해주세요'),
  customerPhone: z.string().optional(),
  category: z.enum([
    '가격정보',
    '상품정보',
    '배송구매',
    '리뷰평점',
    '회원개인정보',
    '시스템기술',
  ]),
  subCategory: z.string().optional(),
  subject: z.string().min(5, '제목은 5자 이상이어야 합니다'),
  description: z.string().min(10, '상세 내용은 10자 이상이어야 합니다'),
  relatedProductId: z.string().optional(),
  relatedOrderId: z.string().optional(),
});

type ComplaintFormData = z.infer<typeof complaintSchema>;

const categories: ComplaintCategory[] = [
  '가격정보',
  '상품정보',
  '배송구매',
  '리뷰평점',
  '회원개인정보',
  '시스템기술',
];

export default function ComplaintForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [createdComplaint, setCreatedComplaint] = useState<ComplaintResponse | null>(null);
  const [submitError, setSubmitError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
  } = useForm<ComplaintFormData>({
    resolver: zodResolver(complaintSchema),
  });

  // 자동으로 생성될 관련 ID들 (시뮬레이션)
  const category = watch('category');
  const autoGeneratedProductId = category === '상품정보' || category === '배송구매'
    ? `PROD-${Math.random().toString(36).substr(2, 9).toUpperCase()}`
    : '';
  const autoGeneratedOrderId = category === '배송구매'
    ? `ORD-${Math.random().toString(36).substr(2, 9).toUpperCase()}`
    : '';

  const onSubmit = async (data: ComplaintFormData) => {
    setIsSubmitting(true);
    setSubmitError(null);
    setCreatedComplaint(null);

    try {
      // 백엔드에서 우선순위와 긴급도를 자동 판단하도록 기본값 설정
      const complaintData = {
        ...data,
        priority: 'medium' as const,
        urgency: 'normal' as const,
        relatedProductId: data.relatedProductId || autoGeneratedProductId || undefined,
        relatedOrderId: data.relatedOrderId || autoGeneratedOrderId || undefined,
      };

      const response = await createComplaint(complaintData);
      setCreatedComplaint(response);
      reset();
    } catch (error) {
      if (error instanceof ApiError) {
        setSubmitError(error.message);
      } else {
        setSubmitError('문의 등록 중 오류가 발생했습니다');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* 성공 메시지 */}
      {createdComplaint && (
        <div className="rounded-md bg-green-50 p-4 border border-green-200">
          <div className="space-y-2">
            <p className="text-sm font-medium text-green-800">
              ✅ 문의가 성공적으로 등록되었습니다!
            </p>
            <div className="text-sm text-green-700">
              <p><strong>티켓 번호:</strong> {createdComplaint.ticketNumber}</p>
              <p><strong>접수 ID:</strong> {createdComplaint.id}</p>
              {createdComplaint.relatedProductId && (
                <p><strong>관련 상품 ID:</strong> {createdComplaint.relatedProductId}</p>
              )}
              {createdComplaint.relatedOrderId && (
                <p><strong>관련 주문 ID:</strong> {createdComplaint.relatedOrderId}</p>
              )}
            </div>
          </div>
        </div>
      )}

      {/* 에러 메시지 */}
      {submitError && (
        <div className="rounded-md bg-red-50 p-4 border border-red-200">
          <p className="text-sm font-medium text-red-800">❌ {submitError}</p>
        </div>
      )}

      {/* 고객 정보 섹션 */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold text-gray-900">고객 정보</h2>

        <div>
          <label htmlFor="customerName" className="block text-sm font-medium text-gray-700">
            이름 <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="customerName"
            {...register('customerName')}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
            placeholder="홍길동"
          />
          {errors.customerName && (
            <p className="mt-1 text-sm text-red-600">{errors.customerName.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="customerEmail" className="block text-sm font-medium text-gray-700">
            이메일 <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="customerEmail"
            {...register('customerEmail')}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
            placeholder="example@email.com"
          />
          {errors.customerEmail && (
            <p className="mt-1 text-sm text-red-600">{errors.customerEmail.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="customerPhone" className="block text-sm font-medium text-gray-700">
            전화번호
          </label>
          <input
            type="tel"
            id="customerPhone"
            {...register('customerPhone')}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
            placeholder="010-1234-5678"
          />
        </div>
      </div>

      {/* 문의 정보 섹션 */}
      <div className="space-y-4">
        <h2 className="text-lg font-semibold text-gray-900">문의 정보</h2>

        <div>
          <label htmlFor="category" className="block text-sm font-medium text-gray-700">
            카테고리 <span className="text-red-500">*</span>
          </label>
          <select
            id="category"
            {...register('category')}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
          >
            <option value="">선택해주세요</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>
          {errors.category && (
            <p className="mt-1 text-sm text-red-600">{errors.category.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="subject" className="block text-sm font-medium text-gray-700">
            제목 <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="subject"
            {...register('subject')}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
            placeholder="문의 제목을 입력해주세요"
          />
          {errors.subject && (
            <p className="mt-1 text-sm text-red-600">{errors.subject.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">
            상세 내용 <span className="text-red-500">*</span>
          </label>
          <textarea
            id="description"
            {...register('description')}
            rows={6}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
            placeholder="문의 내용을 자세히 작성해주세요"
          />
          {errors.description && (
            <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
          )}
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="relatedProductId" className="block text-sm font-medium text-gray-700">
              관련 상품 ID
              {autoGeneratedProductId && (
                <span className="text-xs text-gray-500 ml-2">(자동 생성됨)</span>
              )}
            </label>
            <input
              type="text"
              id="relatedProductId"
              {...register('relatedProductId')}
              value={autoGeneratedProductId}
              readOnly
              className="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
              placeholder="카테고리에 따라 자동 생성"
            />
          </div>

          <div>
            <label htmlFor="relatedOrderId" className="block text-sm font-medium text-gray-700">
              관련 주문 ID
              {autoGeneratedOrderId && (
                <span className="text-xs text-gray-500 ml-2">(자동 생성됨)</span>
              )}
            </label>
            <input
              type="text"
              id="relatedOrderId"
              {...register('relatedOrderId')}
              value={autoGeneratedOrderId}
              readOnly
              className="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm px-4 py-2 border"
              placeholder="카테고리에 따라 자동 생성"
            />
          </div>
        </div>
      </div>

      {/* 제출 버튼 */}
      <div className="flex justify-end">
        <button
          type="submit"
          disabled={isSubmitting}
          className="inline-flex justify-center rounded-md bg-blue-600 px-6 py-3 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isSubmitting ? '등록 중...' : '문의 등록'}
        </button>
      </div>
    </form>
  );
}
